[{"E:\\MERN\\B-Kisan Custom Form\\client\\src\\index.js":"1","E:\\MERN\\B-Kisan Custom Form\\client\\src\\App.js":"2","E:\\MERN\\B-Kisan Custom Form\\client\\src\\reportWebVitals.js":"3","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\form.js":"4","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\personal.js":"5","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\bank.js":"6","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\Order\\delivery.js":"7","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\Order\\deposit.js":"8","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\Order\\order.js":"9","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\statusbar.js":"10","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\icons.js":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":151,"mtime":1611652854788,"results":"14","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"13"},{"size":5246,"mtime":1612694957004,"results":"16","hashOfConfig":"13"},{"size":20620,"mtime":1612675156932,"results":"17","hashOfConfig":"13"},{"size":12386,"mtime":1612675519582,"results":"18","hashOfConfig":"13"},{"size":3642,"mtime":1612674359987,"results":"19","hashOfConfig":"13"},{"size":7803,"mtime":1612674411739,"results":"20","hashOfConfig":"13"},{"size":15469,"mtime":1612698161676,"results":"21","hashOfConfig":"13"},{"size":961,"mtime":1612688554646,"results":"22","hashOfConfig":"13"},{"size":1146,"mtime":1612675229372,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1s5rirt",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"26"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"E:\\MERN\\B-Kisan Custom Form\\client\\src\\index.js",[],["53","54"],"E:\\MERN\\B-Kisan Custom Form\\client\\src\\App.js",[],"E:\\MERN\\B-Kisan Custom Form\\client\\src\\reportWebVitals.js",[],"E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\form.js",[],"E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\personal.js",["55"],"import React,{useEffect,useState} from 'react'\r\n// import ScriptTag from 'react-script-tag'\r\n\r\nimport './form.css'\r\n\r\nfunction Personal(props) {\r\n\r\nconst [err,seterr]=useState({err_OrderNo:{show:true ,message:''},\r\n                            err_Date:{show:true ,message:''},\r\n                            err_Name:{show:true ,message:''},\r\n                            err_AadharNo:{show:true ,message:'',message1:''},\r\n                            err_Address:{show:true ,message:''},\r\n                            err_Tehsil:{show:true ,message:''},\r\n                            err_District:{show:true ,message:''},\r\n                            err_PinCode:{show:true ,message:'',message1:''},\r\n                            err_State:{show:true ,message:''},\r\n                            err_Watsapp:{show:true ,message:'',message1:''},\r\n                            err_Contact:{show:true ,message:'',message1:''},\r\n                            err_CompanyName:{show:true ,message:''}})\r\n\r\n                            function count_digit(n) {\r\n                                var count = 0;\r\n                                if (n >= 1) ++count;\r\n                              \r\n                                while (n / 10 >= 1) {\r\n                                  n /= 10;\r\n                                  ++count;\r\n                                }\r\n                              \r\n                                return count;\r\n                              }                \r\n                                function field_is_empty(value)\r\n                                {\r\n                                    if(value === '' || value === null)\r\n                                    {return true}\r\n                                    else\r\n                                    {return false}\r\n                                }\r\n    function validate_form(name,value){\r\n     switch (name) {\r\n        case 'OrderNo': if(field_is_empty(value))\r\n                        {\r\n                            err.err_OrderNo.show=false\r\n                            err.err_OrderNo.message='this field cannot be empty.'\r\n                        }\r\n                       else\r\n                        {\r\n                            err.err_OrderNo.show=false\r\n                        }  \r\n            break; \r\n        case 'Date':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_Date:{\r\n                                ...prevState.err_Date,\r\n                                show:true,\r\n                                message:'Date field cannot be empty'    \r\n                                }\r\n                            }))\r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_Date:{\r\n                                ...prevState.err_Date,\r\n                                show:false    \r\n                                }\r\n                            }))\r\n                        }\r\n            break; \r\n        case 'Name':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_Name:{\r\n                                    ...prevState.err_Name,\r\n                                    show:true,\r\n                                    message:'Name field cannot be empty'\r\n                                }\r\n                            }))\r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_Name:{\r\n                                ...prevState.err_Name,\r\n                                show:false    \r\n                                }\r\n                            }))\r\n                        }\r\n            break; \r\n        case 'AadharNo':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_AadharNo:{\r\n                                    ...prevState.err_AadharNo,\r\n                                    show:true,\r\n                                    message:'Adhaar Number cannot be blank'\r\n                                }\r\n                            }))\r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_AadharNo:{\r\n                                 ...prevState.err_AadharNo,\r\n                                 show:false\r\n                                }\r\n                            }))\r\n                        }\r\n                        if(count_digit(value) === 12)\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_AadharNo:{\r\n                                ...prevState.err_AadharNo,\r\n                                show:false,\r\n                                message1:''    \r\n                                }\r\n                            }))\r\n                        }\r\n                        else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_AadharNo:{\r\n                                ...prevState.err_AadharNo,\r\n                                show:true,\r\n                                message1:'|  Aadhaar Number must be of 12 digits'    \r\n                                }\r\n                            }))\r\n                        }\r\n            break;  \r\n        case 'Address':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_Address:{\r\n                                ...prevState.err_Address,\r\n                                show:true,\r\n                                message:'Address field cannot be empty'    \r\n                                }\r\n                            }))\r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_Address:{\r\n                                ...prevState.err_Address,\r\n                                show:false    \r\n                                }\r\n                            }))\r\n                        }\r\n            break; \r\n        case 'Tehsil':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                            ...prevState,\r\n                            err_Tehsil:{\r\n                            ...prevState.err_Tehsil,\r\n                            show:true,\r\n                            message:'Tehsil must not be empty'\r\n                            }\r\n                            }))\r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                            ...prevState,\r\n                            err_Tehsil:{\r\n                            ...prevState.err_Tehsil,\r\n                            show:false    \r\n                            }\r\n                            }))\r\n                            err.err_Tehsil.show=false\r\n                        }\r\n            break; \r\n        case 'District':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_District:{\r\n                                ...prevState.err_District,\r\n                                show:true,\r\n                                message:'District field cannot be blank'    \r\n                                }\r\n                            }))\r\n                     \r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_District:{\r\n                                ...prevState.err_District,\r\n                                show:false    \r\n                                }\r\n                            }))\r\n                        }\r\n            break; \r\n        case 'PinCode':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_PinCode:{\r\n                                ...prevState.err_PinCode,\r\n                                show:true,\r\n                                message: 'Pincode cannot be empty'   \r\n                                }\r\n                            }))\r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_PinCode:{\r\n                                ...prevState.err_PinCode,\r\n                                show:false    \r\n                                }\r\n                            }))\r\n                        }\r\n                    if(count_digit(value) === 6)\r\n                    {\r\n                        seterr((prevState)=>({\r\n                            ...prevState,\r\n                            err_PinCode:{\r\n                                ...prevState.err_PinCode,\r\n                                show:false  \r\n                                \r\n                            }\r\n                        }))\r\n                    }\r\n                    else\r\n                    {\r\n                        seterr((prevState)=>({\r\n                            ...prevState,\r\n                            err_PinCode:{\r\n                            ...prevState.err_PinCode,\r\n                            show:true,\r\n                            message1:'| Pincode must be 6 digits' \r\n                            }\r\n                        }))\r\n                    }    \r\n            break;  \r\n        case 'State':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_State:{\r\n                                ...prevState.err_State,\r\n                                show:true,\r\n                                message:'State field cannot be empty'\r\n                                }\r\n                            }))\r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_State:{\r\n                                    ...err.err_State,\r\n                                    show:false\r\n                                }\r\n                            }))\r\n                        }\r\n            break; \r\n        case 'Watsapp':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_Watsapp:{\r\n                                ...prevState.err_Watsapp,\r\n                                show:true,\r\n                                message:'Watsapp Number field cannot be empty'    \r\n                                }\r\n                            }))\r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_Watsapp:{\r\n                                ...prevState.err_Watsapp,\r\n                                show:false    \r\n                                }\r\n                            }))\r\n                        }\r\n                    if(count_digit(value) === 10 )\r\n                    { \r\n                        seterr((prevState)=>({\r\n                           ...prevState,\r\n                           err_Watsapp:{\r\n                               ...prevState.err_Watsapp,\r\n                               show:false,\r\n                               message1:''\r\n                           }\r\n                        }))\r\n                    }\r\n                    else\r\n                    {    \r\n                        seterr((prevState)=>({\r\n                            ...prevState,\r\n                            err_Watsapp:{\r\n                                ...prevState.err_Watsapp,\r\n                                show:true,\r\n                                message1:'| Number must be 10 digits'\r\n                            }\r\n\r\n                        }))\r\n                     }    \r\n            break;  \r\n        case 'Contact':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                    err_Contact:{\r\n                                ...prevState.err_Contact,\r\n                                    show:true,\r\n                                    message:'Contact field cannot be blank '      \r\n                                }\r\n                            }))\r\n                        }\r\n                    else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                    err_Contact:{\r\n                                     ...prevState.err_Contact,\r\n                                     show:false,\r\n                                     message:''\r\n                                    }\r\n                            }))\r\n                        }\r\n                    if(count_digit(value) === 10 )\r\n                        {   \r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_Contact:{\r\n                                ...prevState.err_Contact,\r\n                                show:false,\r\n                                message1:''    \r\n                                }\r\n                            }))\r\n                            }\r\n                     else\r\n                        {  \r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                    err_Contact:{\r\n                                        ...prevState.err_Contact,\r\n                                        show:true,\r\n                                        message1:'| Contact number must have 10 digits'\r\n                                    }\r\n                                }\r\n                            ))   \r\n                         }  \r\n            break;  \r\n        case 'CompanyName':if(field_is_empty(value))\r\n                        {\r\n\r\n                             seterr((prevState) => ({\r\n                                 ...prevState,\r\n                                 err_CompanyName: {\r\n                                   ...prevState.err_CompanyName,\r\n                                   show: true,\r\n                                   message: \"Company Name cannot be empty\"}\r\n                                 }\r\n                                 ))\r\n\r\n                            // err.err_CompanyName.show=true\r\n                            // err.err_CompanyName.message='this field cannot be empty'\r\n                        }\r\n                    else\r\n                        {\r\n                             seterr((prevState) => ({\r\n                                 ...prevState,\r\n                                 err_CompanyName: {\r\n                                   ...prevState.err_CompanyName,\r\n                                   show: false,\r\n                                   message: \"\"}\r\n                                 }\r\n                                 ))\r\n                            // err.err_CompanyName.show=false\r\n                        }\r\n            break;\r\n         default: alert('unknown error occured')\r\n             break;\r\n     }\r\n    }\r\n\r\n\r\n    function handle_change(e){\r\n        var name = e.target.name\r\n        var value= e.target.value\r\n        validate_form(name, value) \r\n        props.ssv({...props.sv, [e.target.name]: e.target.value})\r\n    }\r\n    \r\n   \r\n    useEffect(() => {\r\n         if( \r\n             !err.err_OrderNo.show &&  !err.err_Date.show &&  !err.err_Name.show &&  !err.err_AadharNo.show && \r\n             !err.err_Address.show &&  !err.err_Tehsil.show && !err.err_District.show &&  !err.err_PinCode.show && \r\n             !err.err_State.show &&    !err.err_Watsapp.show &&  !err.err_Contact.show &&  !err.err_CompanyName.show )\r\n        {\r\n            console.log('setting show a to true')\r\n            props.show(true)\r\n        }\r\n        else{\r\n            props.show(false)\r\n            console.log('setting show a to false')\r\n        }\r\n\r\n    },[err])\r\n\r\n    return (\r\n        <div className=\"frame\">\r\n            <h1>Personal details</h1>  \r\n            <input className=\"Input\"  name=\"OrderNo\" value={props.sv.OrderNo} onChange={handle_change}   placeholder=\"Order No\" type=\"text\"/>\r\n            { err.err_OrderNo.show ?<div>{err.err_OrderNo.message}</div>:'' }\r\n           \r\n            <input className=\"Input\"  name=\"Date\" value={props.sv.Date} onChange={handle_change}  placeholder=\"Date\" type=\"date\"/>\r\n            { err.err_Date.show ?<div>{err.err_Date.message}</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"Name\" value={props.sv.Name}  onChange={handle_change} placeholder=\"Name\" type=\"text\" />     \r\n            { err.err_Name.show ?<div>{err.err_Name.message}</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"AadharNo\" value={props.sv.AadharNo} maxlength=\"12\"  onChange={handle_change} placeholder=\"Adhaar No\" type=\"tel\"  />\r\n            { err.err_AadharNo.show ?<div>{err.err_AadharNo.message + err.err_AadharNo.message1}</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"Address\" value={props.sv.Address}  onChange={handle_change} placeholder=\"Address\" type=\"text\" />  \r\n            { err.err_Address.show ?<div>{err.err_Address.message}</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"Tehsil\"  value={props.sv.Tehsil}  onChange={handle_change} placeholder=\"Tehsil\" type=\"text\" />  \r\n            { err.err_Tehsil.show ?<div>{err.err_Tehsil.message}</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"District\" value={props.sv.District}  onChange={handle_change} placeholder=\"District\" type=\"text\" /> \r\n            { err.err_District.show ?<div>{err.err_District.message}</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"PinCode\"  value={props.sv.Pincode}  maxlength=\"6\" onChange={handle_change} placeholder=\"Pincode\" type=\"tel\" /> \r\n            { err.err_PinCode.show ?<div>{err.err_PinCode.message + err.err_PinCode.message1}</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"State\" value={props.sv.State}  onChange={handle_change} placeholder=\"State\" type=\"text\" />\r\n            { err.err_State.show ?<div>{err.err_State.message}</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"Watsapp\"   value={props.sv.Watsapp}  maxlength=\"10\"  onChange={handle_change} placeholder=\"Watsapp\" type=\"tel\" />\r\n            { err.err_Watsapp.show ?<div>{err.err_Watsapp.message + err.err_Watsapp.message1 }</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"Contact\"   value={props.sv.Contact}  maxlength=\"10\"  onChange={handle_change} placeholder=\"Contact\" type=\"tel\" />\r\n            { err.err_Contact.show ?<div>{err.err_Contact.message + err.err_Contact.message1}</div>:'' }\r\n\r\n            <input className=\"Input\"  name=\"CompanyName\"   value={props.sv.CompanyName}  onChange={handle_change} placeholder=\"Company Name\" type=\"text\" />\r\n            { err.err_CompanyName.show ?<div>{err.err_CompanyName.message}</div>:'' }\r\n       \r\n            {/* <input className=\"Input\"  type=\"submit\" onClick={()=>{alert( JSON.stringify(props.sv))}}/> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Personal\r\n","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\bank.js",["56","57","58"],"import React,{useState,useEffect} from 'react'\r\n\r\nimport './form.css'\r\nfunction Bank(props) {\r\n\r\n    function handle_input(e){\r\n        var name = e.target.name\r\n        var value= e.target.value\r\n        validate_form(name, value) \r\n        props.ssv({...props.sv, [e.target.name]: e.target.value})\r\n    }\r\n\r\n    const [err,seterr]=useState({\r\n        err_Ac:{ show:true , message:'Select atleast One Account' },\r\n        err_AcHolder:{ show:true , message:'' },\r\n        err_AcNo:{ show:true , message:'',message1:'' },\r\n        err_IFSC:{ show:true , message:'',message1:'' },\r\n        err_DealerName:{ show:true , message:'' },\r\n        err_DealerContact:{ show:true , message:'',message1:'' },\r\n    })\r\n\r\n    function count_digit(n) {\r\n        var count = 0;\r\n        if (n >= 1) ++count;\r\n      \r\n        while (n / 10 >= 1) {\r\n          n /= 10;\r\n          ++count;\r\n        }\r\n      \r\n        return count;\r\n      }                \r\n        function field_is_empty(value)\r\n        {\r\n            if(value === '' || value === null)\r\n            {return true}\r\n            else\r\n            {return false}\r\n        }\r\n    function validate_form(name,value){\r\n        switch (name) {\r\n            case 'Ac':if(field_is_empty(value))\r\n                      {\r\n                          seterr((prevState)=>({\r\n                            ...prevState,\r\n                            err_Ac:{\r\n                            ...prevState.err_Ac,\r\n                            show:true,\r\n                            message:'Deposit Account must be chosen'    \r\n                            }\r\n                          }))\r\n                      }\r\n                      else{\r\n                          seterr((prevState)=>({\r\n                            ...prevState,\r\n                            err_Ac:{\r\n                            ...prevState.err_Ac,\r\n                            show:false    \r\n                            }\r\n                          }))\r\n                      }\r\n                break;\r\n            case 'AcHolder':if(field_is_empty(value))\r\n                      {\r\n                           seterr((prevState)=>({\r\n                               ...prevState,\r\n                               err_AcHolder:{\r\n                               ...prevState.err_AcHolder,\r\n                               show:true,\r\n                               message:'Account holder name must be filled'    \r\n                               }\r\n                           })) \r\n                      }\r\n                      else{\r\n                          seterr((prevState)=>({\r\n                               ...prevState,\r\n                               err_AcHolder:{\r\n                               ...prevState.err_AcHolder,\r\n                               show:false    \r\n                               }\r\n                           })) \r\n                      }\r\n                break;\r\n            case 'AcNo':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_AcNo:{\r\n                                ...prevState.err_AcNo,\r\n                                show:true,\r\n                                message:'Account Number cannot be blank'   \r\n                                }\r\n                            })) \r\n                        }\r\n                        else{\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_AcNo:{\r\n                                ...prevState.err_AcNo,\r\n                                show:false,\r\n                                message:''    \r\n                                }\r\n                                \r\n                            })) \r\n                        }\r\n                        if(count_digit(value) >= 9 && count_digit(value) <=18 )\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_AcNo:{\r\n                                ...prevState.err_AcNo,\r\n                                show:false    \r\n                                }\r\n                            }))\r\n                        }\r\n                        else\r\n                        {\r\n                             seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_AcNo:{\r\n                                ...prevState.err_AcNo,\r\n                                show:true,\r\n                                message1:'| Account Number must be 9 to 18 digits'    \r\n                                }\r\n                            }))\r\n                        }\r\n                break;\r\n            case 'IFSC':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_IFSC:{\r\n                                ...prevState.err_IFSC,\r\n                                show:true,\r\n                                message:'IFSC Code cannot be blank'    \r\n                                }\r\n                            })) \r\n                        }\r\n                        else{\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_IFSC:{\r\n                                ...prevState.err_IFSC,\r\n                                show:false,\r\n                                message:''    \r\n                                }\r\n                            })) \r\n                        }\r\n                        if(value.match('([A-Za-z0]{4})(0\\[0-9]{6})$') || value.match('([A-Za-z0]{4})(0\\[A-Za-z]{6})$'))     \r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_IFSC:{\r\n                                ...prevState.err_IFSC,\r\n                                show:false    \r\n                                }\r\n                            }))\r\n                        } \r\n                        else{\r\n                             seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_IFSC:{\r\n                                ...prevState.err_IFSC,\r\n                                show:true,\r\n                                message1:'| IFSC Code not correct'    \r\n                                }\r\n                            }))\r\n                        }\r\n                break;  \r\n            case 'DealerName':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_DealerName:{\r\n                                ...prevState.err_DealerName,\r\n                                show:true,\r\n                                message:'Dealer name cannot be empty'    \r\n                                }    \r\n                            })) \r\n                        }\r\n                        else{\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_DealerName:{\r\n                                ...prevState.err_DealerName,\r\n                                show:false    \r\n                                }\r\n                            })) \r\n                        }\r\n                break;\r\n            case 'DealerContact':if(field_is_empty(value))\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_DealerContact:{\r\n                                ...prevState.err_DealerContact,\r\n                                show:true,\r\n                                message:'Dealer Contact Number cannot be empty'    \r\n                                }\r\n                            })) \r\n                        }\r\n                        else{\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_DealerContact:{\r\n                                ...prevState.err_DealerContact,\r\n                                show:false,\r\n                                message:'' \r\n                                }\r\n                            })) \r\n                        }\r\n                        if(count_digit(value) === 10)   \r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_DealerContact:{\r\n                                ...prevState.err_DealerContact,\r\n                                show:false    \r\n                                }\r\n                            }))\r\n                        }   \r\n                        else\r\n                        {\r\n                            seterr((prevState)=>({\r\n                                ...prevState,\r\n                                err_DealerContact:{\r\n                                ...prevState.err_DealerContact,\r\n                                show:true,\r\n                                message1:'| Dealer Contact Number must have 10 digits '    \r\n                                }\r\n                            }))\r\n                        }  \r\n                break;               \r\n            default:alert('some unknown error happened')\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if( \r\n            !err.err_Ac.show &&  !err.err_AcHolder.show &&  !err.err_AcNo.show && \r\n            !err.err_IFSC.show && !err.err_DealerName.show &&  !err.err_DealerContact.show  )\r\n       {\r\n           console.log('setting show c to true')\r\n           props.show(true)\r\n       }\r\n       else{\r\n            console.log('setting show c to false')\r\n            props.show(false)\r\n       }\r\n\r\n   },[err])\r\n\r\n    return ( \r\n        <div className=\"frame\">\r\n            <h1>Bank</h1>             \r\n            {/* <input className=\"Input\"  value={props.sv.Ac} name='Ac'onChange={handle_input} placeholder=\"Deposit Account\" type=\"text\"/> */}\r\n            <label htmlFor=\"rows\" ><h2>Deposit Account</h2></label>\r\n             <div className=\"rows\"> \r\n             <div className=\"cols\">\r\n             <input type=\"radio\" name=\"Ac\" value=\"SBI\" onChange={handle_input}/>\r\n            <h4>SBI BANK ACCOUNT DETAILS</h4>\r\n            <h5>IFSC: SBIN0030509 <br/> A/c Number: 38279304216</h5>\r\n             </div>\r\n             <div className=\"cols\">\r\n             <input   type=\"radio\" name=\"Ac\" value=\"HDFC\" onChange={handle_input}/>\r\n            <h4 >HDFC BANK ACCOUNT DETAILS</h4>\r\n            <h5>IFSC:HDFC0004042  <br/> A/c Number: 502000377762797</h5>\r\n             </div> \r\n            </div>\r\n\r\n            { err.err_Ac.show ?<div>{err.err_Ac.message}</div>:'' }\r\n\r\n            <input className=\"Input\"  value={props.sv.AcHolder} name='AcHolder'     onChange={handle_input} placeholder=\"Account holder\" type=\"text\"/>\r\n            { err.err_AcHolder.show ?<div>{err.err_AcHolder.message}</div>:'' }\r\n\r\n            <input className=\"Input\"  value={props.sv.AcNo} name='AcNo'         onChange={handle_input} placeholder=\"Account Number\" type=\"text\"/>\r\n            { err.err_AcNo.show ?<div>{err.err_AcNo.message + err.err_AcNo.message1}</div>:'' }\r\n\r\n            <input className=\"Input\"  value={props.sv.IFSC} name='IFSC' maxLength=\"11\" onChange={handle_input} placeholder=\"IFSC Code\" type=\"text\"/>\r\n            { err.err_IFSC.show ?<div>{err.err_IFSC.message+ err.err_IFSC.message1}</div>:'' }\r\n\r\n            <input className=\"Input\"  value={props.sv.DealerName} name='DealerName'   onChange={handle_input} placeholder=\"Dealer Name\" type=\"text\"/>\r\n            { err.err_DealerName.show ?<div>{err.err_DealerName.message }</div>:'' }\r\n\r\n            <input className=\"Input\"  value={props.sv.DealerContact} name='DealerContact'onChange={handle_input} placeholder=\"Dealer Contact\" type=\"number\"/>  \r\n            { err.err_DealerContact.show ?<div>{err.err_DealerContact.message+ err.err_DealerContact.message1 }</div>:'' }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Bank\r\n\r\n\r\n","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\Order\\delivery.js",["59"],"import React,{useState,useEffect} from 'react'\r\n// import './delivery.css'\r\nimport '../form.css'\r\nimport '../order.css'\r\nfunction Delivery(props) {\r\n    // console.log('rendering delivery')\r\n\r\n    const [err,seterr]=useState({\r\n        err_DeliveryDate:{ show:true , message:'' },\r\n        err_DeliveryPlace:{ show:true , message:'' },\r\n    })\r\n\r\n    \r\n    function field_is_empty(value)\r\n    {\r\n        if(value === '' || value === null)\r\n        {return true}\r\n        else\r\n        {return false}\r\n    }  \r\n    function validate_form(name,value){\r\n        switch (name) {\r\n            case 'DeliveryDate':if(field_is_empty(value) ){\r\n                seterr((prevState)=>({\r\n                    ...prevState,\r\n                    err_DeliveryDate:{\r\n                    ...prevState.err_DeliveryDate,\r\n                    show:true,\r\n                    message:'Delivery Date cant be blank!'    \r\n                    }\r\n                }))\r\n                }\r\n                    else{\r\n                        seterr((prevState)=>({\r\n                            ...prevState,\r\n                            err_DeliveryDate:{\r\n                            ...prevState.err_DeliveryDate,\r\n                            show:false,\r\n                            message:''    \r\n                            }\r\n                        }))\r\n\r\n                }\r\n    break;\r\n    case 'DeliveryPlace':if(field_is_empty(value)){\r\n        seterr((prevState)=>({\r\n            ...prevState,\r\n            err_DeliveryPlace:{\r\n            ...prevState.err_DeliveryPlace,\r\n            show:true,\r\n            message:'Delivery Place cannot be blank!'    \r\n            }\r\n        }))\r\n        }\r\n            else{\r\n                seterr((prevState)=>({\r\n                    ...prevState,\r\n                    err_DeliveryPlace:{\r\n                    ...prevState.err_DeliveryPlace,\r\n                    show:false,\r\n                    message:''    \r\n                    }\r\n                }))\r\n        }\r\n        break;\r\n    \r\n        default:alert('unknown case encountered');\r\n        break;\r\n        }\r\n    }\r\n\r\n\r\n    function handle_input(e){\r\n        var name = e.target.name\r\n        var value= e.target.value\r\n        validate_form(name, value) \r\n        // props.ssv({...props.sv, [e.target.name]: e.target.value})\r\n        props.ssv((prevState)=>({\r\n            ...prevState,\r\n            [e.target.name]:e.target.value\r\n        }))\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if( \r\n            !err.err_DeliveryDate.show &&  !err.err_DeliveryPlace.show   )\r\n       {\r\n           console.log('setting show b2 to true')\r\n           props.show(true)\r\n       }\r\n       else{\r\n           props.show(false)\r\n           console.log('setting show b2 to false')\r\n       }\r\n\r\n   },[err])\r\n\r\n    return (\r\n        <div className = \"frame1\">\r\n         <table>\r\n         <hr></hr>\r\n        <tr className=\"del_cont\">  \r\n        <div className=\"del_dat\">\r\n        <td>Delivery Date :</td>  \r\n        <td ><input name=\"DeliveryDate\" value={props.sv.DeliveryDate} onChange={handle_input}    type=\"date\"/></td>\r\n        {err.err_DeliveryDate.show ? <td>{err.err_DeliveryDate.message}</td>:''   }\r\n        </div>\r\n        <div className=\"del_add\">\r\n        <td>Delivery Address :</td>  \r\n        <td ><input  name=\"DeliveryPlace\" value={props.sv.DeliveryPlace} onChange={handle_input}    placeholder=\"Delivery Address\" type=\"text\"/></td> \r\n        {err.err_DeliveryPlace.show ? <td>{err.err_DeliveryPlace.message}</td>:''   }\r\n        </div>\r\n        </tr>\r\n\r\n        <hr></hr>\r\n\r\n         </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  React.memo(Delivery)\r\n","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\Order\\deposit.js",["60"],"import React,{useState,useEffect} from 'react'\r\nimport '../form.css'\r\nimport '../order.css'\r\nfunction Deposit(props) {\r\n    // console.log('rendering deposit')\r\n    const initial_bnk = {\r\n        Deposit_Date:'',\r\n        Deposit_Amount:0,\r\n        Deposit_UTRNo:'',\r\n        Deposit_Bank:''  \r\n    }\r\nconst [bnk,setbnk] = useState(initial_bnk)\r\n\r\nconst [bnk_count,set_bnk_count] = useState(0)\r\nconst [del_bnk_count,set_del_bnk_count]=useState(0)\r\n\r\n    const [err,seterr]=useState({\r\n        err_Deposit_Date  :{ show:true , message:''},\r\n        err_Deposit_Amount :{ show:true , message:''},\r\n        err_Deposit_UTRNo :{ show:true , message:''},\r\n        err_Deposit_Bank:{show:true, message:''}\r\n    })\r\n\r\n    function handle_bnk_input(e){\r\n        var name = e.target.name\r\n        var value= e.target.value\r\n        validate_form(name, value) \r\n        setbnk((prevState)=>({\r\n            ...prevState,\r\n            [name]:value\r\n        })) \r\n    }\r\n\r\n    function add_bnk(e){\r\n        e.preventDefault()\r\n        set_bnk_count(bnk_count+1)\r\n        var payload = {\r\n            Deposit_Date:bnk.Deposit_Date,\r\n            Deposit_Amount:bnk.Deposit_Amount,\r\n            Deposit_UTRNo:bnk.Deposit_UTRNo,\r\n            Deposit_Bank:bnk.Deposit_Bank \r\n        }\r\n        var f1=async(payload)=>{\r\n           await props.sv.DepositTable.push(payload)\r\n        }\r\n        f1(payload);\r\n        // props.sv.DepositTable.push(payload)\r\n        alert(JSON.stringify(payload))\r\n        setbnk(initial_bnk)\r\n    }\r\n    function delete_bnk(e,indx){\r\n        e.preventDefault()\r\n        set_del_bnk_count(del_bnk_count+1)\r\n        var data = [...props.sv.DepositTable];\r\n        data.splice(indx, 1);\r\n        props.ssv({DepositTable:data})\r\n    }\r\n\r\n\r\n    function field_is_empty(value)\r\n{\r\n    if(value === '' || value === null)\r\n    {return true}\r\n    else\r\n    {return false}\r\n}  \r\n    function validate_form(name,value){\r\n    // console.log(name,value)\r\n    switch (name) {\r\n    case 'Deposit_Date':if(field_is_empty(value) && bnk_count === 0){\r\n        seterr((prevState)=>({\r\n            ...prevState,\r\n            err_Deposit_Date:{\r\n            ...prevState.err_Deposit_Date,\r\n            show:true,\r\n            message:'Deposit Date cannot be blank!'    \r\n            }\r\n        }))\r\n        }\r\n            else{\r\n                seterr((prevState)=>({\r\n                    ...prevState,\r\n                    err_Deposit_Date:{\r\n                    ...prevState.err_Deposit_Date,\r\n                    show:false,\r\n                    message:''    \r\n                    }\r\n                }))\r\n        }\r\nbreak;\r\n\r\ncase 'Deposit_Amount':if(field_is_empty(value) && bnk_count === 0){\r\n    seterr((prevState)=>({\r\n        ...prevState,\r\n        err_Deposit_Amount:{\r\n        ...prevState.err_Deposit_Amount,\r\n        show:true,\r\n        message:'Deposit Amount cannot be blank!'    \r\n        }\r\n    }))\r\n    }\r\n        else{\r\n            seterr((prevState)=>({\r\n                ...prevState,\r\n                err_Deposit_Amount:{\r\n                ...prevState.err_Deposit_Amount,\r\n                show:false,\r\n                message:''    \r\n                }\r\n            }))\r\n    }\r\nbreak;\r\n\r\ncase 'Deposit_UTRNo':if(field_is_empty(value) && bnk_count === 0){\r\nseterr((prevState)=>({\r\n    ...prevState,\r\n    err_Deposit_UTRNo:{\r\n    ...prevState.err_Deposit_UTRNo,\r\n    show:true,\r\n    message:' UTR/IMPS/RTGS/Ref no number  cannot be blank!'    \r\n    }\r\n}))\r\n}\r\n    else{\r\n        seterr((prevState)=>({\r\n            ...prevState,\r\n            err_Deposit_UTRNo:{\r\n            ...prevState.err_Deposit_UTRNo,\r\n            show:false,\r\n            message:''    \r\n            }\r\n        }))\r\n}\r\nbreak;\r\ncase 'Deposit_Bank':if(field_is_empty(value) && bnk_count === 0){\r\nseterr((prevState)=>({\r\n...prevState,\r\nerr_Deposit_Bank:{\r\n...prevState.err_Deposit_Bank ,\r\nshow:true,\r\nmessage:' Bank Name cannot be blank!'    \r\n}\r\n}))\r\n}\r\nelse{\r\n    seterr((prevState)=>({\r\n        ...prevState,\r\n        err_Deposit_Bank:{\r\n        ...prevState.err_Deposit_Bank,\r\n        show:false,\r\n        message:''    \r\n        }\r\n    }))\r\n}\r\nbreak;\r\n\r\ndefault:alert('unknown case encountered');\r\nbreak;\r\n}\r\n}\r\n\r\nfunction table_len(){\r\n    var len = props.sv.DepositTable.length;\r\n    if (len >=1 )\r\n    return true\r\n    else\r\n    return false\r\n    }    \r\nuseEffect(() => {\r\n    if(table_len())\r\n   {\r\n       console.log('setting show b3 to true')\r\n       props.show(true)\r\n   }\r\n   else{\r\n    console.log('setting show b3 to false')\r\n    props.show(false)   \r\n   }\r\n\r\n},[bnk_count,del_bnk_count])\r\n\r\nreturn (\r\n        <div className = \"frame1\">           \r\n            <table>\r\n                {/* {JSON.stringify(props.sv.DepositTable)} */}\r\n                <tr className=\"tablebox\">\r\n                    <th className=\"tablecell\"><span>[+/-]</span></th>\r\n                    <th className=\"tablecell\"><span>Deposit Date</span></th>\r\n                    <th className=\"tablecell\"><span>Amount</span></th>\r\n                    <th className=\"tablecell\"><span>UTR/RTGS/IMPS</span></th>\r\n                    <th className=\"tablecell\"><span>Bank Name</span></th>\r\n                </tr>\r\n                <tr className=\"tablebox\">\r\n                    <td className=\"tablecell\">{}</td>\r\n                    <td className=\"tablecell\">{err.err_Deposit_Date.show ?<span>{err.err_Deposit_Date.message}</span>:''}</td>\r\n                    <td className=\"tablecell\">{err.err_Deposit_Amount.show ?<span>{err.err_Deposit_Amount.message}</span>:''} </td>\r\n                    <td className=\"tablecell\">{err.err_Deposit_UTRNo.show ?<span>{err.err_Deposit_UTRNo.message}</span>:''}</td>\r\n                    <td className=\"tablecell\">{err.err_Deposit_Bank.show ?<span>{err.err_Deposit_Bank.message}</span>:''}</td>\r\n                </tr>  \r\n                <tr className=\"tablebox\" id=\"sdfh\">\r\n                    <td className=\"tablecell\">\r\n                        <button className=\"btn_add\" onClick={add_bnk}>+</button>\r\n                    </td>\r\n                    <td className=\"tablecell\">\r\n                        <input name=\"Deposit_Date\" value={bnk.Deposit_Date} onChange={handle_bnk_input} placeholder=\"Deposit Date\"  className=\"in\" type=\"date\"/>\r\n                    </td>\r\n                    <td className=\"tablecell\">\r\n                        <input name=\"Deposit_Amount\" value={bnk.Deposit_Amount} onChange={handle_bnk_input} placeholder=\"Deposit Amount\"  className=\"inp\" type=\"number\"/>\r\n                    </td>\r\n                    <td className=\"tablecell\">\r\n                        <input name=\"Deposit_UTRNo\" value={bnk.Deposit_UTRNo} onChange={handle_bnk_input} placeholder=\"UTR/IMPS/RTGS/REF No\" className=\"inp\" type=\"text\"/>\r\n                    </td>\r\n                    <td className=\"tablecell\">\r\n                        <input name=\"Deposit_Bank\" value={ bnk.Deposit_Bank}  onChange={handle_bnk_input} placeholder=\"Bank Name\"  className=\"inp\"  type=\"text\"/>\r\n                    </td>\r\n                </tr>\r\n                {\r\n                     props.sv.DepositTable.map((k,indx)=>{\r\n                       return (<tr className=\"tablebox\" key={\"indx\"+indx}>\r\n                           <td className=\"tablecell\" ><button className=\"del_btn\" onClick={(e,indx)=>delete_bnk(e,indx)}>delete{' '}{indx+1}</button></td>\r\n                           <td className=\"tablecell\">{k.Deposit_Date}</td>\r\n                           <td className=\"tablecell\">{k.Deposit_Amount}</td>\r\n                           <td className=\"tablecell\">{k.Deposit_UTRNo}</td>\r\n                           <td className=\"tablecell\">{k.Deposit_Bank}</td>\r\n                       </tr>)\r\n                     })\r\n                     }\r\n            </table>    \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  React.memo(Deposit)\r\n","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\Order\\order.js",["61","62","63","64"],"import React,{useState,useEffect} from 'react'\r\nimport '../form.css'\r\nimport '../order.css'\r\nfunction Order(props) {\r\n\r\n    // console.log('rendering order')\r\n\r\n    const [err,seterr]=useState({\r\n        err_Order_Details:{ show:true , message:'' },\r\n        err_Order_Quantity:{ show:true , message:'' },\r\n        err_Order_Rate:{ show:true , message:'' },\r\n        err_Order_Amount:{ show:true , message:'' },\r\n        err_Trasport_Chrg:{ show:true , message:'' },\r\n        err_Advance:{ show:true , message:'' }\r\n    })\r\n\r\n\r\n    const initial_order =  {\r\n        Order_Details:'',\r\n        Order_Quantity:0,\r\n        Order_Rate:0,\r\n        Order_Amount:0 }     \r\n\r\nconst [ordr,setordr] = useState(initial_order)\r\n\r\nconst [ordr_count,set_ordr_count]=useState(0)   \r\nconst [del_count,set_del_count]=useState(0)\r\n\r\n    function handle_ordr_input(e){\r\n        var name = e.target.name\r\n        var value= e.target.value\r\n        validate_form(name, value) \r\n        setordr((prevState)=>({\r\n            ...prevState,\r\n            [name]:value\r\n        }))\r\n    }\r\n\r\n    function handle_state_input(e){\r\n        var name = e.target.name\r\n        var value= e.target.value\r\n        validate_form(name, value) \r\n        // props.ssv({...props.sv, [e.target.name]: e.target.value})\r\n        props.ssv((prevState)=>({\r\n            ...prevState,\r\n            [e.target.name]:e.target.value\r\n        }))\r\n    }\r\n    \r\n    function add_ordr(e){\r\n        e.preventDefault()\r\n        set_ordr_count(ordr_count+1)  \r\n        var payload = {\r\n            Order_Details:ordr.Order_Details,\r\n            Order_Quantity:ordr.Order_Quantity,\r\n            Order_Rate:ordr.Order_Rate,\r\n            Order_Amount:ordr.Order_Amount\r\n         }\r\n\r\n         var f2 = async(payload)=>{\r\n            await props.sv.OrderTable.push(payload)\r\n         }\r\n         f2(payload);\r\n        // props.sv.OrderTable.push(payload)\r\n        alert(JSON.stringify(payload))\r\n        setordr(initial_order)\r\n    }\r\n    function delete_order(event,indx){\r\n        event.preventDefault()\r\n        set_del_count(del_count+1)\r\n        var data = [...props.sv.OrderTable];\r\n        data.splice(indx, 1);\r\n        props.ssv({OrderTable:data})\r\n    }\r\n\r\n    function field_is_empty(value)\r\n    {\r\n        if(value === '' || value === null)\r\n        {return true}\r\n        else\r\n        {return false}\r\n    }  \r\n        function validate_form(name,value){\r\n        // console.log(name,value)\r\n        switch (name) {\r\n            case 'Order_Details': if(field_is_empty(value) && ordr_count===0)\r\n                            {\r\n                                seterr((prevState)=>({\r\n                                    ...prevState,\r\n                                    err_Order_Details  :{\r\n                                    ...prevState.err_Order_Details ,\r\n                                    show:true ,\r\n                                    message:'order details cant be blank'    \r\n                                    }\r\n                                }))\r\n                            }\r\n                            else{\r\n                                seterr((prevState)=>({\r\n                                    ...prevState,\r\n                                    err_Order_Details  :{\r\n                                    ...prevState.err_Order_Details ,\r\n                                    show:false ,\r\n                                    message:''    \r\n                                    }\r\n                                }))\r\n                            }\r\n            break;\r\n\r\n        case 'Order_Quantity':if(field_is_empty(value) && ordr_count===0)\r\n                            {\r\n                                seterr((prevState)=>({\r\n                                    ...prevState,\r\n                                    err_Order_Quantity  :{\r\n                                    ...prevState.err_Order_Quantity ,\r\n                                    show:true ,\r\n                                    message:'Quantity cant be blank'    \r\n                                    }\r\n                                }))\r\n                            }\r\n                            else{\r\n                                seterr((prevState)=>({\r\n                                    ...prevState,\r\n                                    err_Order_Quantity:{\r\n                                    ...prevState.err_Order_Quantity ,\r\n                                    show:false ,\r\n                                    message:''    \r\n                                    }\r\n                                }))\r\n                            }\r\n            break;\r\n\r\n        case 'Order_Rate':if(field_is_empty(value) && ordr_count===0)\r\n                            {\r\n                                seterr((prevState)=>({\r\n                                    ...prevState,\r\n                                    err_Order_Rate  :{\r\n                                    ...prevState.err_Order_Rate ,\r\n                                    show:true ,\r\n                                    message:'Rate cant be blank'    \r\n                                    }\r\n                                }))\r\n                            }\r\n                            else{\r\n                                seterr((prevState)=>({\r\n                                    ...prevState,\r\n                                    err_Order_Rate  :{\r\n                                    ...prevState.err_Order_Rate ,\r\n                                    show:false,\r\n                                    message:''    \r\n                                    }\r\n                                }))\r\n                            }\r\n            break;\r\n\r\n            case 'TransportChrg':if(field_is_empty(value))\r\n                                {\r\n                                    seterr((prevState)=>({\r\n                                        ...prevState,\r\n                                        err_Trasport_Chrg  :{\r\n                                        ...prevState.err_Trasport_Chrg ,\r\n                                        show:true ,\r\n                                        message:'Enter Transport Charge or enter 0'    \r\n                                        }\r\n                                    }))\r\n                                }\r\n                                else{\r\n                                    seterr((prevState)=>({\r\n                                        ...prevState,\r\n                                        err_Trasport_Chrg  :{\r\n                                        ...prevState.err_Trasport_Chrg ,\r\n                                        show:false ,\r\n                                        message:''    \r\n                                        }\r\n                                    }))\r\n                                }\r\n            break;\r\n            case 'Advance':if(field_is_empty(value))\r\n                            {\r\n                                seterr((prevState)=>({\r\n                                    ...prevState,\r\n                                    err_Advance:{\r\n                                    ...prevState.err_Advance,\r\n                                    show:true ,\r\n                                    message:'Enter Advance Amount'    \r\n                                    }\r\n                                }))\r\n                            }\r\n                            else{\r\n                                seterr((prevState)=>({\r\n                                    ...prevState,\r\n                                    err_Advance:{\r\n                                    ...prevState.err_Advance,\r\n                                    show:false ,\r\n                                    message:''    \r\n                                    }\r\n                                }))\r\n                            }\r\n            break;\r\n            default:alert('unknown case encountered');\r\n            break;\r\n    }\r\n    }\r\n\r\n\r\n    function table_len(){\r\n        var len = props.sv.OrderTable.length;\r\n        if (len >=1 )\r\n        return true\r\n        else\r\n        return false\r\n        }    \r\n    useEffect(() => {\r\n        if(table_len())\r\n       {\r\n           console.log('setting show b1 to true')\r\n           props.show(true)\r\n       }\r\n       else{\r\n           props.show(false)\r\n           console.log('setting show b1 to false')\r\n       }\r\n\r\n       var sum = 0.0;\r\n        props.sv.OrderTable.map((kk)=>{\r\n        console.log(kk.Order_Amount)\r\n        sum =sum+kk.Order_Amount\r\n        })\r\n        console.log(sum,props.sv.TotalAmt)\r\n        props.ssv({...props.sv,BillAmt:sum })\r\n\r\n    },[ordr_count,del_count])\r\n\r\n\r\n     useEffect(() => {\r\n\r\n        // var sum = 0.0;\r\n        //     props.sv.OrderTable.map((kk)=>{\r\n        //     console.log(kk.Order_Amount,props.sv.TransportChrg)\r\n        //     sum =sum+kk.Order_Amount\r\n        //     })\r\n\r\n        // // props.ssv({...props.sv,TotalAmt: parseFloat(props.sv.BillAmt)+parseFloat(props.sv.TransportChrg)+ sum})\r\n        console.log(parseFloat(props.sv.TransportChrg))\r\n        var v1=parseFloat(props.sv.BillAmt) ;\r\n        var v2=parseFloat(props.sv.TransportChrg) ;\r\n        var tot=v1+v2\r\n        console.log(v1+v2)\r\n                  props.sv.TotalAmt=tot\r\n                 props.ssv({...props.sv,TotalAmt:tot})\r\n\r\n        // props.ssv((prevState)=>({\r\n        //     ...prevState,\r\n        //     TotalAmt:tot\r\n        // }))\r\n    }, [del_count, props.sv.BillAmt,props.sv.TransportChrg])\r\n\r\n    useEffect(() => {\r\n        props.ssv({...props.sv,DueAmt: props.sv.TotalAmt - props.sv.Advance})\r\n    }, [props.sv.BillAmt, props.sv.TransportChrg,props.sv.Advance])\r\n\r\n\r\n   \r\n\r\n    return (\r\n        <div className = \"frame1\">\r\n            <table>\r\n            {/* {JSON.stringify(props.sv)} */}\r\n                <tr className=\"tablebox\">\r\n                    <th className=\"tablecell\"><span>[+/-]</span></th>\r\n                    <th className=\"tablecell\"><span>Detail</span></th>\r\n                    <th className=\"tablecell\"><span>Quantity</span></th>\r\n                    <th className=\"tablecell\"><span>Rate</span></th>\r\n                    <th className=\"tablecell\"><span>Amount</span></th>\r\n                </tr>\r\n\r\n                <tr className=\"tablebox\">\r\n                    <td className=\"tablecell\">{}</td>\r\n                    <td className=\"tablecell\">{err.err_Order_Details.show ? err.err_Order_Details.message :''}</td>\r\n                    <td className=\"tablecell\">{err.err_Order_Quantity.show ? err.err_Order_Quantity.message :''}</td>\r\n                    <td className=\"tablecell\">{err.err_Order_Rate.show ? err.err_Order_Rate.message :''}</td>\r\n                    <td className=\"tablecell\">{}</td>\r\n                </tr>\r\n\r\n                <tr className=\"tablebox\" >\r\n                    <th className=\"tablecell\">\r\n                        <button className=\"btn_add\" onClick={add_ordr}>+</button>\r\n                    </th>\r\n                    <th className=\"tablecell\">\r\n                        <input name=\"Order_Details\" value={ordr.Order_Details} onChange={handle_ordr_input} placeholder=\"Details\"  className=\"inp\" type=\"text\"/>\r\n                    </th>\r\n                    <th className=\"tablecell\">\r\n                        <input name=\"Order_Quantity\" value={ordr.Order_Quantity} onChange={handle_ordr_input} placeholder=\"Quantity\"  className=\"inp\" type=\"number\"/>\r\n                    </th>\r\n                    <th className=\"tablecell\">\r\n                        <input name=\"Order_Rate\" value={ordr.Order_Rate} onChange={handle_ordr_input} placeholder=\"Rate\" className=\"inp\" type=\"number\"/>\r\n                    </th>\r\n                    <th className=\"tablecell\">\r\n                        <input name=\"Order_Amount\" value={ ordr.Order_Amount=ordr.Order_Quantity*ordr.Order_Rate   }  placeholder=\"Amount\" disabled className=\"inp\"  type=\"number\"/>\r\n                    </th>\r\n                </tr>\r\n             \r\n             {         props.sv.OrderTable.map((k,indx)=>{\r\n                       return (<tr className=\"tablebox\" key={\"k\"+indx}>\r\n                           <td className=\"tablecell\" ><button className=\"del_btn\" onClick={(e)=>delete_order(e,indx)}>delete{' '}{indx+1}</button></td>\r\n                           <td className=\"tablecell\">{k.Order_Details}</td>\r\n                           <td className=\"tablecell\">{k.Order_Quantity}</td>\r\n                           <td className=\"tablecell\">{k.Order_Rate}</td>\r\n                           <td className=\"tablecell\">{k.Order_Amount}</td>   \r\n                       </tr>)\r\n                     })\r\n                     }\r\n\r\n            \r\n            <tr className=\"tablebox\">\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">Bill Amount</td>\r\n                                <td className=\"tablecell\">{props.sv.BillAmt}</td>\r\n                            </tr>  \r\n                            <tr className=\"tablebox\">\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">{err.err_Trasport_Chrg.show? err.err_Trasport_Chrg.message:'' }</td>\r\n                                <td className=\"tablecell\">Transport Charges</td>\r\n                                <td className=\"tablecell\">{\r\n                                <input name=\"TransportChrg\" value={props.sv.TransportChrg} onChange={handle_state_input} placeholder=\"Transport chrg\"  className=\"inp\" type=\"number\"/>\r\n                                }</td>\r\n                            </tr>   \r\n                            <tr className=\"tablebox\">\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">Total Amount</td>\r\n                                <td className=\"tablecell\">{props.sv.TotalAmt}</td>\r\n                            </tr>    \r\n                            <tr className=\"tablebox\">\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">{err.err_Advance.show? err.err_Advance.message:'' }</td>\r\n                                <td className=\"tablecell\">Advance Payment</td>\r\n                                <td className=\"tablecell\">{\r\n                                <input name=\"Advance\" value={props.sv.Advance} onChange={handle_state_input} placeholder=\"Advance\"  className=\"inp\" type=\"number\"/>\r\n                                }</td>\r\n                            </tr>        \r\n                            <tr className=\"tablebox\">\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">.</td>\r\n                                <td className=\"tablecell\">Due Amount</td>\r\n                                <td className=\"tablecell\">{props.sv.DueAmt}</td>\r\n                            </tr> \r\n                        </table>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default  React.memo(Order)\r\n","E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\statusbar.js",[],"E:\\MERN\\B-Kisan Custom Form\\client\\src\\form_components\\icons.js",[],["65","66"],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":420,"column":7,"nodeType":"73","endLine":420,"endColumn":12,"suggestions":"74"},{"ruleId":"75","severity":1,"message":"76","line":149,"column":57,"nodeType":"77","messageId":"78","endLine":149,"endColumn":58,"suggestions":"79"},{"ruleId":"75","severity":1,"message":"76","line":149,"column":103,"nodeType":"77","messageId":"78","endLine":149,"endColumn":104,"suggestions":"80"},{"ruleId":"71","severity":1,"message":"72","line":254,"column":6,"nodeType":"73","endLine":254,"endColumn":11,"suggestions":"81"},{"ruleId":"71","severity":1,"message":"72","line":97,"column":6,"nodeType":"73","endLine":97,"endColumn":11,"suggestions":"82"},{"ruleId":"71","severity":1,"message":"83","line":180,"column":3,"nodeType":"73","endLine":180,"endColumn":28,"suggestions":"84"},{"ruleId":"85","severity":1,"message":"86","line":224,"column":37,"nodeType":"87","messageId":"88","endLine":224,"endColumn":39},{"ruleId":"71","severity":1,"message":"83","line":231,"column":7,"nodeType":"73","endLine":231,"endColumn":29,"suggestions":"89"},{"ruleId":"71","severity":1,"message":"72","line":255,"column":8,"nodeType":"73","endLine":255,"endColumn":60,"suggestions":"90"},{"ruleId":"71","severity":1,"message":"72","line":259,"column":8,"nodeType":"73","endLine":259,"endColumn":67,"suggestions":"91"},{"ruleId":"67","replacedBy":"92"},{"ruleId":"69","replacedBy":"93"},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["96"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["97","98"],["99","100"],["101"],["102"],"React Hook useEffect has missing dependencies: 'props' and 'table_len'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["103"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside",["104"],["105"],["106"],["94"],["95"],"no-global-assign","no-unsafe-negation",{"desc":"107","fix":"108"},{"messageId":"109","fix":"110","desc":"111"},{"messageId":"112","fix":"113","desc":"114"},{"messageId":"109","fix":"115","desc":"111"},{"messageId":"112","fix":"116","desc":"114"},{"desc":"107","fix":"117"},{"desc":"107","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"125","fix":"126"},"Update the dependencies array to be: [err, props]",{"range":"127","text":"128"},"removeEscape",{"range":"129","text":"130"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"131","text":"132"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"133","text":"130"},{"range":"134","text":"132"},{"range":"135","text":"128"},{"range":"136","text":"128"},"Update the dependencies array to be: [bnk_count, del_bnk_count, props, table_len]",{"range":"137","text":"138"},"Update the dependencies array to be: [ordr_count, del_count, table_len, props]",{"range":"139","text":"140"},"Update the dependencies array to be: [del_count, props, props.sv.BillAmt, props.sv.TransportChrg]",{"range":"141","text":"142"},"Update the dependencies array to be: [props.sv.BillAmt, props.sv.TransportChrg, props.sv.Advance, props]",{"range":"143","text":"144"},[17489,17494],"[err, props]",[5774,5775],"",[5774,5774],"\\",[5820,5821],[5820,5820],[10099,10104],[2766,2771],[4557,4582],"[bnk_count, del_bnk_count, props, table_len]",[8615,8637],"[ordr_count, del_count, table_len, props]",[9421,9473],"[del_count, props, props.sv.BillAmt, props.sv.TransportChrg]",[9587,9646],"[props.sv.BillAmt, props.sv.TransportChrg, props.sv.Advance, props]"]